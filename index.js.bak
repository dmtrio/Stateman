var ViewModel = function(properties, updaters, subscriptions) {
  return new function() {
    let dataStore  = {};
    let callbackStore = {};
    let updatersStore = [];
    let callbackStack = [];
    let updateDepth = 0;

    function makeReactive(vm, properties) {
      properties.forEach(function(property) {
        Object.defineProperty(vm, property.name, {
          set: function(val) {
            dataStore[property.name] = val;
            if (Array.isArray(callbackStore[property.name])) {
              callbackStore[property.name].forEach(function(func) {
                if (callbackStack.length > 0) {
                  let add = true;
                  callbackStack.forEach((inStackFunc) => {
                    if (inStackFunc === func) {
                      add = false;
                      return
                    }
                  })
                  if (add) callbackStack.push(func);
                } else {
                  callbackStack.push(func);
                }
              })
            }
          },
          get: function() {
            return dataStore[property.name];
          }
        })
        vm[property.name] = property.initial || null
      });
    }

    function VM () {
      if (Array.isArray(properties)) {
        makeReactive(this, properties);
      }
      updaters.forEach((func)=>{
        if (typeof func === 'function') {
          updatersStore.push(func);
        }
      })
      subscriptions.forEach((func)=>{
        if (typeof func === 'function') {
          func(this.subscribe)
        }
      })
      return this;
    }

    VM.prototype.subscribe = function VMsubscribe(properties, callback) {
      properties.forEach((propertyName) => {
        callbackStore[propertyName] = callbackStore[propertyName] || [];
        callbackStore[propertyName].push(callback);
      })
    }

    VM.prototype.update = function VMupdate(action) {
      updatersStore.forEach((updateFunc) => {
        updateDepth++;
        updateFunc(this, action);
        updateDepth--;
      })
      while (!updateDepth && callbackStack.length) {
        const callback = callbackStack.pop();
        const string = callback(this);
        console.log(string);
      }
    }

    return new VM();
  }();
}

let callCount = 0;

var initViewModelSubscriptions = (subscribe) => {
  // subscribe('currentObj', (state) => {
  //   console.log('p', state.currentObj, 's', state.arrayIndex);
  // });
  // subscribe('arrayIndex', (state) => {
  //   console.log('p', state.arrayIndex, 's', state.currentObj);
  // });
  subscribe(['currentObj', 'arrayIndex'], (state) => {
    return `${state.currentObj}, 's', ${state.arrayIndex}`;
    // console.log('p', state.currentObj, 's', state.arrayIndex);
  });
}
let objs = [{a: 0}, {b: 1}, {c: 2}, {d: 3}, {e: 4}]
var viewModelUpdate = (state, action) => {
  switch (action.type) {
    case 'UPADATE_CURRENT_OBJ':
      var obj = objs[action.index];
      if (state.currentObj !== obj) {
        state.currentObj = obj;
      }
      break
    case 'UPDATE_TWO_PROPERTIES':
        callCount++;
        var newIndex = Number(action.index);
        console.log('isSame:', state.arrayIndex === newIndex, 'vals:', state.arrayIndex, newIndex)
        state.update({type: 'UPADATE_CURRENT_OBJ', index: action.index})
        state.update({type: 'UPDATE_CURRENT_INDEX', index: action.index})
      break; 
  }
}

var viewModelIndexUpdate = (state, action) => {
  switch (action.type) {
    case 'UPDATE_CURRENT_INDEX':
      var newIndex = Number(action.index);
      // console.log('isSame:', state.arrayIndex === newIndex, 'vals:', state.arrayIndex, newIndex)
      if (state.arrayIndex !== newIndex) {
        state.arrayIndex = newIndex;
      }
      break;
  }
}

function init(data) {
  var viewModel = new ViewModel(
    [
      {name: 'currentObj', initial: {}},
      {name: 'arrayIndex', initial: data.index}
    ],[
      viewModelIndexUpdate,
      viewModelUpdate,
    ],[
      initViewModelSubscriptions
    ]
  );

  const interval = setInterval(() => {
    viewModel.update({type: 'UPADATE_CURRENT_OBJ', index: Math.floor(Math.random() * 5)})
    // viewModel.update({type: 'UPDATE_TWO_PROPERTIES', index: Math.random()});  
  }, 100)
  setTimeout(() => {
    clearInterval(interval);
    console.log(callCount)
  }, 6000);
};

const data = {
  index: 10,
}
init(data)

// const interval = setInterval(() => {
//   callCount++;
// }, 1)
// setTimeout(() => {
//   clearInterval(interval);
//   console.log(callCount)
// }, 10000);